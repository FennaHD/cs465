from inv_cipher import  InverseCipher
import unittest


class InverseCipherTest(unittest.TestCase):

	inv_cph = InverseCipher()

	def setUp(self):
		self.inv_shift_rows_initial_state = [[0x7a, 0xd5, 0xfd, 0xa7],
		                                     [0x89, 0xef, 0x4e, 0x27],
		                                     [0x2b, 0xca, 0x10, 0x0b],
		                                     [0x3d, 0x9f, 0xf5, 0x9f]]

		self.inv_sub_byte_initial_state = [[0x7a, 0x9f, 0x10, 0x27],
		                                   [0x89, 0xd5, 0xf5, 0x0b],
		                                   [0x2b, 0xef, 0xfd, 0x9f],
		                                   [0x3d, 0xca, 0x4e, 0xa7]]

		self.inv_mixed_columns_initial_state = [[0xe9, 0xf7, 0x4e, 0xec],
		                                        [0x02, 0x30, 0x20, 0xf6],
		                                        [0x1b, 0xf2, 0xcc, 0xf2],
		                                        [0x35, 0x3c, 0x21, 0xc7]]

	def test_inv_shift_rows_positive(self):
		expected = [[0x7a, 0x9f, 0x10, 0x27],
		            [0x89, 0xd5, 0xf5, 0x0b],
		            [0x2b, 0xef, 0xfd, 0x9f],
		            [0x3d, 0xca, 0x4e, 0xa7]]
		self.assertEqual(expected, self.inv_cph.shift_rows(self.inv_shift_rows_initial_state))

	def test_inv_shift_rows_negative(self):
		expected = [[0x7a, 0x9f, 0x10, 0x27],
		            [0x89, 0xd5, 0xf5, 0x0b],
		            [0x2b, 0xef, 0xfd, 0x9f],
		            [0x3d, 0xca, 0x4e, 0xaa]] # this last byte is different
		self.assertNotEqual(expected, self.inv_cph.shift_rows(self.inv_shift_rows_initial_state))

	def test_inv_sub_bytes_positive(self):
		expected = [[0xbd, 0x6e, 0x7c, 0x3d],
		            [0xf2, 0xb5, 0x77, 0x9e],
		            [0x0b, 0x61, 0x21, 0x6e],
		            [0x8b, 0x10, 0xb6, 0x89]]
		self.assertEqual(expected, self.inv_cph.sub_bytes(self.inv_sub_byte_initial_state))

	def test_inv_sub_bytes_negative(self):
		expected = [[0xbd, 0x6e, 0x7c, 0x3d],
		            [0xf2, 0xb5, 0x77, 0x9e],
		            [0x0b, 0x61, 0x21, 0x6e],
		            [0x8b, 0x10, 0xb6, 0x88]] # this last byte is different
		self.assertNotEqual(expected, self.inv_cph.sub_bytes(self.inv_sub_byte_initial_state))

	def test_inv_mixed_columns_positive(self):
		expected = [[0x54, 0xd9, 0x90, 0xa1],
		            [0x6b, 0xa0, 0x9a, 0xb5],
		            [0x96, 0xbb, 0xf4, 0x0e],
		            [0xa1, 0x11, 0x70, 0x2f]]
		self.assertEqual(expected, self.inv_cph.mix_columns(self.inv_mixed_columns_initial_state))